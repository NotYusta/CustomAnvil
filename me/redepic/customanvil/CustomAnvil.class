package me.redepic.customanvil;

import org.bukkit.Bukkit;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.inventory.AnvilInventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Objects;

public class CustomAnvil extends JavaPlugin implements Listener {

    public void onEnable() {
        getLogger().info("[CA] CustomAnvil has been enabled!");
        getLogger().info("[CA] This plugin made by RedEpic, Also Join our server!");
        getLogger().info("Play.RaidPvP.xyz");
        getLogger().info("   __   _______\n" +
                "  |_ _____  _  |\n" +
                "     \\      /\n" +
                "    __|    |_ _  \n" +
                "  |____ ______ |");
        Bukkit.getPluginManager().registerEvents(this, this);

        try {
            MetricsLite metrics = new MetricsLite(this);
            metrics.start();
        } catch (IOException ignored) {
        }

    }

    @EventHandler
    public void anvil(InventoryClickEvent e) {
        if (!(e.getInventory() instanceof AnvilInventory)) {
            return;
        }

        if (e.getSlotType() != InventoryType.SlotType.RESULT) {
            return;
        }

        ItemStack slot1 = e.getInventory().getItem(0);
        ItemStack slot2 = e.getInventory().getItem(1);
        ItemStack slot3 = e.getInventory().getItem(2);
        ItemStack slot4 = e.getInventory().getItem(3);
        ItemStack slot5 = e.getInventory().getItem(4);
        ItemStack slot6 = e.getInventory().getItem(5);
        ItemStack slot7 = e.getInventory().getItem(6);
        ItemStack slot8 = e.getInventory().getItem(7);
        ItemStack slot9 = e.getInventory().getItem(8);
        ItemStack slot10 = e.getInventory().getItem(9);
        ItemStack slot11 = e.getInventory().getItem(10);
        ItemStack slot12 = e.getInventory().getItem(11);
        ItemStack slot13 = e.getInventory().getItem(12);
        ItemStack slot14 = e.getInventory().getItem(13);
        ItemStack slot15 = e.getInventory().getItem(14);
        ItemStack slot16 = e.getInventory().getItem(15);
        ItemStack slot17 = e.getInventory().getItem(16);
        ItemStack slot18 = e.getInventory().getItem(17);
        ItemStack slot19 = e.getInventory().getItem(18);
        ItemStack slot20 = e.getInventory().getItem(19);
        ItemStack result = e.getInventory().getItem(20);

        if (slot2 == null) {
            return;
        }

        ArrayList<String> itemLores = new ArrayList<>();
        assert slot1 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot1.getItemMeta()).getLore()).toString());
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot2.getItemMeta()).getLore()).toString());
        assert slot3 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot4 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot5 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot6 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot7 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot8 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot1.getItemMeta()).getLore()).toString());
        assert slot9 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot10 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot11 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot12 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot13 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot14 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot15 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot16 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot1.getItemMeta()).getLore()).toString());
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot2.getItemMeta()).getLore()).toString());
        assert slot17 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot18 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot19 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());
        assert slot20 != null;
        itemLores.add(Objects.requireNonNull(Objects.requireNonNull(slot3.getItemMeta()).getLore()).toString());

        assert result != null;
        Objects.requireNonNull(result.getItemMeta()).setLore(itemLores);

    }
}
